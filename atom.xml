<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[めも。]]></title>
  <link href="http://tnaka.github.com/blog/atom.xml" rel="self"/>
  <link href="http://tnaka.github.com/blog/"/>
  <updated>2013-10-29T14:07:27+09:00</updated>
  <id>http://tnaka.github.com/blog/</id>
  <author>
    <name><![CDATA[tnaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vsftpdのlogに日本語ファイル名を正常に出力する]]></title>
    <link href="http://tnaka.github.com/blog/blog/2013/10/29/make-multibyte-characters-readable-in-vsftpd-log/"/>
    <updated>2013-10-29T13:43:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2013/10/29/make-multibyte-characters-readable-in-vsftpd-log</id>
    <content type="html"><![CDATA[<p>Ubuntu 12.04にvsftpdをインストールしてみたが、/var/log/vsftpd.logを覗いてみたところ日本語ファイル名が正しく出力されていないことに気づいた。
vsftpdではログへのマルチバイト文字の出力ができないらしく、全て?に置換されてしまっている。</p>

<p>少々調べてみたところ、ソースを変更すれば良いということだったので、ソースをダウンロードしてきてmakeし、debを作ってインストールすることにした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>src <span class="c">#ソースが展開されるので適当な場所にcd</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>apt-get <span class="nb">source </span>vsftpd
</span><span class='line'>sudo apt-get build-dep vsftpd <span class="c">#make/installに必要なpackageをインストール</span>
</span><span class='line'><span class="nb">cd </span>vsftpd-*
</span></code></pre></td></tr></table></div></figure>


<p>ここで、logging.cの中の</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">str_replace_unprintable</span><span class="p">(</span><span class="n">p_str</span><span class="p">,</span> <span class="sc">&#39;?&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>の行をコメントアウトしてから、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>debchange -v 2.3.5-1ubuntu2+mblog <span class="c">#versionを変更</span>
</span><span class='line'><span class="c">#エディタが起動するので、コメントをかきこんで保存</span>
</span><span class='line'>debuild -us -uc -b <span class="c">#deb作成</span>
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>sudo apt-get remove vsftpd <span class="c">#既存のvsftpdを削除</span>
</span><span class='line'>sudo dpkg -i vsftpd_2.3.5-1ubuntu2+mblog_amd64.deb
</span></code></pre></td></tr></table></div></figure>


<p>としてインストールする。
debchangeがない場合は apt-get install devscripts すると入る。
fakerootもないとだめかもしれない。</p>

<p>これでutf-8のファイル名ならばログにutf-8のまま出力されるようになったはずなので、確認する。</p>

<p>ついでに、勝手にアップデートされないようにバージョンを固定しておく。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>vsftpd hold | sudo dpkg --set-selections
</span><span class='line'>sudo dpkg --get-selections vsftpd <span class="c">#holdになっているか確認</span>
</span><span class='line'><span class="c">#echo vsftpd install | sudo dpkg --set-selections で解除できる</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WindowsホストのVirtualBoxでLinuxのVMから共有フォルダで日本語ファイルを扱う]]></title>
    <link href="http://tnaka.github.com/blog/blog/2013/07/14/virtualbox-shared-folder-on-windows/"/>
    <updated>2013-07-14T18:42:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2013/07/14/virtualbox-shared-folder-on-windows</id>
    <content type="html"><![CDATA[<p>Windowsホスト上でVirtualBoxを走らせてUbuntuなど使っているわけだが、
共有フォルダを使ったときに日本語のファイルがうまく共有されなかった。
正しくエンコーディングの設定をするとうまくいくようだ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mount -t vboxsf shared -o iocharset=utf8,convertcp=cp932 /mnt/shared</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NURO 光を契約してみた]]></title>
    <link href="http://tnaka.github.com/blog/blog/2013/05/09/nuro-hikari/"/>
    <updated>2013-05-09T22:59:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2013/05/09/nuro-hikari</id>
    <content type="html"><![CDATA[<p>NURO光という家庭向けの2Gbpsの通信サービスが始まったと聞いて、早速契約してみた。</p>

<p>普通はルータにPPPoEのユーザ名パスワードなど設定しないと繋がらないはずで、
工事前に設定しておこうと思ったのだが、ルータ兼ONUの設定画面には項目はなく、
工事が終わると何も設定していないのに繋がっていた。
接続はIPv4のみで、IPv6はまだ使えないようだ。</p>

<p>スピードテストの結果は以下のとおり。
ルータにはLANポートが3つ付いており、これと無線LANの合計で最大2Gbpsと謳っているが、
繋ぐPCの関係上1ポートのみを使用して測定したので、理論上1Gbps以上出ることはない。
時間帯を変えて2回測定したが、下りは750Mbps前後、上りは900Mbps前後出るようだ。
別のノートPCでも試したが、
スペックが足りなかったのか200Mbps程度しか出なかった。
やはり高速通信にはCPUやメモリなどの余裕が必要になるようだ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Intel(R) Core(TM) i7-3520M CPU @ 2.90GHz Mem 16GB
</span><span class='line'>Intel Corporation 82579LM Gigabit Network Connection (rev 04)
</span><span class='line'>
</span><span class='line'>===== Radish Network Speed Testing Ver.4.0.4β - Test Report =====
</span><span class='line'>測定条件
</span><span class='line'>　精度:高 データタイプ:圧縮効率低
</span><span class='line'>下り回線
</span><span class='line'>　速度:746.6Mbps (93.32MByte/sec) 測定品質:97.4 接続数:16
</span><span class='line'>上り回線
</span><span class='line'>　速度:934.5Mbps (116.8MByte/sec) 測定品質:99.7 接続数:16
</span><span class='line'>測定者ホスト:**********.***.ap.nuro.jp
</span><span class='line'>測定時刻:2013/5/9(Thu) 12:21
</span><span class='line'>==================================================================
</span><span class='line'>
</span><span class='line'>===== Radish Network Speed Testing Ver.4.0.4β - Test Report =====
</span><span class='line'>測定条件
</span><span class='line'>　精度:低 データタイプ:圧縮効率低
</span><span class='line'>下り回線
</span><span class='line'>　速度:782.4Mbps (97.80MByte/sec) 測定品質:96.5 接続数:16
</span><span class='line'>上り回線
</span><span class='line'>　速度:881.3Mbps (110.2MByte/sec) 測定品質:97.0 接続数:16
</span><span class='line'>測定者ホスト:**********.***.ap.nuro.jp
</span><span class='line'>測定時刻:2013/5/9(Thu) 22:01
</span><span class='line'>==================================================================</span></code></pre></td></tr></table></div></figure>


<p>料金について、二年契約で月4980円ということで、まあ妥当かなという感じはする。
また、工事費が月々割賦で1050円かかるが、現在キャンペーン中で月々の割賦分を
免除してくれるらしい。
ただ、この割賦が30ヶ月なので、2年契約の切れ目で解約しようとすると、
その時点で払っていない工事費分を請求されることになるので注意が必要だ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 8 上で samba over ssh]]></title>
    <link href="http://tnaka.github.com/blog/blog/2012/11/04/samba-over-ssh-in-windows8/"/>
    <updated>2012-11-04T04:33:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2012/11/04/samba-over-ssh-in-windows8</id>
    <content type="html"><![CDATA[<p>とある事情で外からsshしかできないネットワーク上にあるsambaマシンに外からアクセスする必要があり、
普段常用しているマシンでは Windows 7 に samba over ssh のための設定をしている。</p>

<p>この設定は<a href="http://www.nikhef.nl/~janjust/CifsOverSSH/VistaLoopback.html">Cifs-over-SSH for Windows Vista/7</a>
に書かれている。
やっていることはloopbackデバイスを作り、そのデバイスの445ポートにsshでトンネリングした出口を繋げてやるというものである。
ただ、Windows 7 では普通にネットワークの設定をするだけではsambaで使う445ポートがunbindされないため、接続できない。
詳しいことは分からないが、sambaサービスの開始を遅らせることでこれを回避しているようである。</p>

<p>今回Windows 8を入れたマシンでこの設定をしようとしたところ、smbというサービスがなくなっていたためscからはじまるコマンドが失敗してしまった。
だめもとで次のnetshコマンドを実行し、スケジューラ関係の設定はせずにリブートしてトンネルを開けたところ、
問題なく接続できるようになった。</p>

<p>というわけで、Windows 8では7よりも楽にsamba over sshの設定ができることがわかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近のthinkpadでミドルクリックを有効にする]]></title>
    <link href="http://tnaka.github.com/blog/blog/2012/06/17/enable-middle-click-on-thinkpad/"/>
    <updated>2012-06-17T22:39:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2012/06/17/enable-middle-click-on-thinkpad</id>
    <content type="html"><![CDATA[<p>Thinkpadのトラックポイントは、Linux上ではドライバのできが良いのか
中クリックと上下左右スクロールを両立できる。
Windowsの標準ドライバではこの共存はできないが、
ドライバ側の中クリックスクロールを無効にして
TrackWheelというソフトを入れることで、
両立することができる。</p>

<p>しかし、この間買ったThinkpad X220tのWindows環境では、
ドライバの設定で中ボタンドラッグによるスクロールを解除しても
中クリックが有効にならなかった。
T61pでは上記の設定で普通に動いているので、
トラックポイントのドライバのバージョンが新しいとこの問題が起きるらしい。</p>

<p>SynTPEnh.exeを終了しておくと中ボタンが効くようになったので、
msconfigで起動時にSynTPEnh.exeを実行しないように設定した。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 10.04 on 新さくらVPSでgrub-pcのapt-getに失敗する]]></title>
    <link href="http://tnaka.github.com/blog/blog/2012/04/19/apt-get-grub-pc-failed-on-new-sakura-vps/"/>
    <updated>2012-04-19T02:32:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2012/04/19/apt-get-grub-pc-failed-on-new-sakura-vps</id>
    <content type="html"><![CDATA[<p>さくらVPSでUbuntu 10.04のサーバを動かしているのだが、
プランが新しくなってメモリやHDD容量が増えたので、
旧プランのVPSからrsyncを使ってまるごと移行した。
しかし、apt-get upgradeしたところgrub-pcのpost-installation scriptだかでfailしてしまった。</p>

<p>dpkg-reconfigure -aしてもなおらないので調べたところ、どうやら
https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/604335
のエラーらしい。
/dev/vdaの検出に失敗しているようだ。</p>

<p>解決法としては、上のページに添付されているパッチgrub-pc.postinst.udiffを
/var/lib/dpkg/info/grub-pc.postinstにあててやれば良い。
その後dpkg-reconfigure -aしたところ、
インストール先に/dev/vdaを選んでもなぜかパーティションに
インストールすることになるとの警告が出たものの、正常にインストールされた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 11.10でsslサポート付きのsquidを使う]]></title>
    <link href="http://tnaka.github.com/blog/blog/2012/04/13/squid-with-ssl-on-ubuntu-11-10/"/>
    <updated>2012-04-13T01:44:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2012/04/13/squid-with-ssl-on-ubuntu-11-10</id>
    <content type="html"><![CDATA[<p>ubuntu 11.10でapt-getして入るsquidにはsslサポートが付いていないので、
巷の記事を読んでhttps_portなどをsquid.confに書いたところで
https接続は有効にならない。
そこでこれまた巷の記事を参考にsquidをソースからコンパイルして入れてみた。</p>

<h1>手順</h1>

<p>まずはソースを取ってくる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get <span class="nb">source </span>squid <span class="c">#エラーが出たらdevscripts等をインストール</span>
</span><span class='line'>apt-get build-dep squid
</span><span class='line'>apt-get install libssl-dev
</span><span class='line'><span class="nb">cd </span>squid-2.7.STABLE9
</span></code></pre></td></tr></table></div></figure>


<p>ここでビルドの設定を変更。
debian/rulesのConfigure the package以下のそれっぽい場所に&#8211;enable-sslを追加する。</p>

<p>また、このままではSSLv2なんたらが見付からないとのエラーが出る。
opensslにはSSLv2は実装されていないようなので、パッチを当てる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- src/ssl_support.c.orig      2012-04-13 01:37:21.661625364 +0900</span>
</span><span class='line'><span class="gi">+++ src/ssl_support.c   2012-04-13 01:39:08.857629352 +0900</span>
</span><span class='line'><span class="gu">@@ -446,10 +446,12 @@</span>
</span><span class='line'>     ERR_clear_error();
</span><span class='line'>     debug(83, 1) (&quot;Initialising SSL.\n&quot;);
</span><span class='line'>     switch (version) {
</span><span class='line'><span class="gi">+#ifndef OPENSSL_NO_SSL2</span>
</span><span class='line'>     case 2:
</span><span class='line'>        debug(83, 5) (&quot;Using SSLv2.\n&quot;);
</span><span class='line'>        method = SSLv2_server_method();
</span><span class='line'>        break;
</span><span class='line'><span class="gi">+#endif</span>
</span><span class='line'>     case 3:
</span><span class='line'>        debug(83, 5) (&quot;Using SSLv3.\n&quot;);
</span><span class='line'>        method = SSLv3_server_method();
</span><span class='line'><span class="gu">@@ -609,10 +611,12 @@</span>
</span><span class='line'>     ERR_clear_error();
</span><span class='line'>     debug(83, 1) (&quot;Initialising SSL.\n&quot;);
</span><span class='line'>     switch (version) {
</span><span class='line'><span class="gi">+#ifndef OPENSSL_NO_SSL2</span>
</span><span class='line'>     case 2:
</span><span class='line'>        debug(83, 5) (&quot;Using SSLv2.\n&quot;);
</span><span class='line'>        method = SSLv2_client_method();
</span><span class='line'>        break;
</span><span class='line'><span class="gi">+#endif</span>
</span><span class='line'>     case 3:
</span><span class='line'>        debug(83, 5) (&quot;Using SSLv3.\n&quot;);
</span><span class='line'>        method = SSLv3_client_method();
</span></code></pre></td></tr></table></div></figure>


<p>さらに、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure
</span><span class='line'>debuild -us -uc -b
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>sudo dpkg -i squid_2.7.STABLE9-4ubuntu4_amd64.deb squid-common_2.7.STABLE9-4ubuntu4_all.deb
</span></code></pre></td></tr></table></div></figure>


<p>これでOK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lvインストール後のgit log文字化け]]></title>
    <link href="http://tnaka.github.com/blog/blog/2012/03/26/git-log-with-lv/"/>
    <updated>2012-03-26T04:34:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2012/03/26/git-log-with-lv</id>
    <content type="html"><![CDATA[<p>ページャにはいろいろなエンコーディングに対応したlvが良いと聞き、
早速インストールしたが、git logで色を付けるコントロールシーケンスが
うまく解釈されず、そのままゴミになって表示されてしまうようになった。</p>

<p>対処としては、gitのページャの設定を変える。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global core.pager <span class="s2">&quot;lv -c&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>として、lv側でANSIのエスケープシーケンスを認識するオプションを有効にしてやると、
きちんと表示されるようになる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressの編集用リポジトリを別の場所に作る]]></title>
    <link href="http://tnaka.github.com/blog/blog/2012/03/26/make-second-repo/"/>
    <updated>2012-03-26T03:52:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2012/03/26/make-second-repo</id>
    <content type="html"><![CDATA[<p>せっかくgitを使っているんだから、別のPCでもblogに投稿できるとうれしいと思って試してみた。</p>

<p>このblogは一つのリポジトリにgh-pagesブランチとmasterブランチがあり、
masterブランチの方にoctopressのルートをコミットし、
gh-pagesの方に生成されたhtmlがコミットされるようになっている。
一つにまとめたかったのでこのような構成にしたが、
これからやる人はbitbucketかなにかにソース用として
別のリポジトリを作ったほうが、こんがらがることがなくて良いと思う。</p>

<p>で、当然rubyの設定はしておくとして、その後適当なディレクトリで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:tnaka/blog.git blog
</span></code></pre></td></tr></table></div></figure>


<p>としてソース類を取ってくる。ここで、カレントブランチがgh-pagesを取ってきている場合は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b master origin/master
</span></code></pre></td></tr></table></div></figure>


<p>して、masterをcheckoutしておく。
その後、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>bundle install
</span><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>として、ここでリポジトリの書き込み可能なurlを指定する。
ここでpostを作成し、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake gen_deploy
</span></code></pre></td></tr></table></div></figure>


<p>すれば問題なくpushされた。
ただ、gh-pagesブランチを強制的に上書きしているようで、
git logがcloneしてからのものとなってしまう。
どうにかならないものか。</p>

<p>その後、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit
</span><span class='line'>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>すると、sourceがmasterにコミットされる。</p>

<p>別のリポジトリでは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull origin master
</span></code></pre></td></tr></table></div></figure>


<p>すれば他所での編集もマージされるっぽい。</p>

<p>とりあえずはこの方法で様子見することにする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test-2nd-repo]]></title>
    <link href="http://tnaka.github.com/blog/blog/2012/03/26/test-2nd-repo/"/>
    <updated>2012-03-26T03:44:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2012/03/26/test-2nd-repo</id>
    <content type="html"><![CDATA[<p>2つ以上のリポジトリを作って更新するテスト。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="http://tnaka.github.com/blog/blog/2012/03/25/test/"/>
    <updated>2012-03-25T04:49:00+09:00</updated>
    <id>http://tnaka.github.com/blog/blog/2012/03/25/test</id>
    <content type="html"><![CDATA[<p>皆のすなる技術系ブログといふものをしてみむとてするなり。</p>
]]></content>
  </entry>
  
</feed>
